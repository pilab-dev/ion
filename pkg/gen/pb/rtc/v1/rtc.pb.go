// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: rtc/v1/rtc.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Target int32

const (
	Target_PUBLISHER  Target = 0
	Target_SUBSCRIBER Target = 1
)

// Enum value maps for Target.
var (
	Target_name = map[int32]string{
		0: "PUBLISHER",
		1: "SUBSCRIBER",
	}
	Target_value = map[string]int32{
		"PUBLISHER":  0,
		"SUBSCRIBER": 1,
	}
)

func (x Target) Enum() *Target {
	p := new(Target)
	*p = x
	return p
}

func (x Target) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Target) Descriptor() protoreflect.EnumDescriptor {
	return file_rtc_v1_rtc_proto_enumTypes[0].Descriptor()
}

func (Target) Type() protoreflect.EnumType {
	return &file_rtc_v1_rtc_proto_enumTypes[0]
}

func (x Target) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Target.Descriptor instead.
func (Target) EnumDescriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{0}
}

type TrackEvent_State int32

const (
	TrackEvent_ADD    TrackEvent_State = 0
	TrackEvent_REMOVE TrackEvent_State = 1
)

// Enum value maps for TrackEvent_State.
var (
	TrackEvent_State_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
	}
	TrackEvent_State_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
	}
)

func (x TrackEvent_State) Enum() *TrackEvent_State {
	p := new(TrackEvent_State)
	*p = x
	return p
}

func (x TrackEvent_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackEvent_State) Descriptor() protoreflect.EnumDescriptor {
	return file_rtc_v1_rtc_proto_enumTypes[1].Descriptor()
}

func (TrackEvent_State) Type() protoreflect.EnumType {
	return &file_rtc_v1_rtc_proto_enumTypes[1]
}

func (x TrackEvent_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrackEvent_State.Descriptor instead.
func (TrackEvent_State) EnumDescriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{7, 0}
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid        string            `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Uid        string            `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Parameters map[string]string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{0}
}

func (x *JoinRequest) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *JoinRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *JoinRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type JoinReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   *Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *JoinReply) Reset() {
	*x = JoinReply{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinReply) ProtoMessage() {}

func (x *JoinReply) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinReply.ProtoReflect.Descriptor instead.
func (*JoinReply) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{1}
}

func (x *JoinReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *JoinReply) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type SessionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target Target `protobuf:"varint,1,opt,name=target,proto3,enum=rtc.Target" json:"target,omitempty"`
	// 'offer' | 'answer'
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// sdp contents
	Sdp string `protobuf:"bytes,3,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *SessionDescription) Reset() {
	*x = SessionDescription{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionDescription) ProtoMessage() {}

func (x *SessionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionDescription.ProtoReflect.Descriptor instead.
func (*SessionDescription) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{2}
}

func (x *SessionDescription) GetTarget() Target {
	if x != nil {
		return x.Target
	}
	return Target_PUBLISHER
}

func (x *SessionDescription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SessionDescription) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type Trickle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target Target `protobuf:"varint,1,opt,name=target,proto3,enum=rtc.Target" json:"target,omitempty"`
	Init   string `protobuf:"bytes,2,opt,name=init,proto3" json:"init,omitempty"`
}

func (x *Trickle) Reset() {
	*x = Trickle{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trickle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trickle) ProtoMessage() {}

func (x *Trickle) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trickle.ProtoReflect.Descriptor instead.
func (*Trickle) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{3}
}

func (x *Trickle) GetTarget() Target {
	if x != nil {
		return x.Target
	}
	return Target_PUBLISHER
}

func (x *Trickle) GetInit() string {
	if x != nil {
		return x.Init
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{4}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Simulcast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 'f' | 'h' | 'q'
	Rid string `protobuf:"bytes,1,opt,name=rid,proto3" json:"rid,omitempty"`
	// 'send' | 'recv'
	Direction  string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Parameters string `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Simulcast) Reset() {
	*x = Simulcast{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Simulcast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Simulcast) ProtoMessage() {}

func (x *Simulcast) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Simulcast.ProtoReflect.Descriptor instead.
func (*Simulcast) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{5}
}

func (x *Simulcast) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *Simulcast) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *Simulcast) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// track id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// stream id
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// 'audio' | 'video' | 'data'
	Kind string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	// true | false
	Muted bool `protobuf:"varint,4,opt,name=muted,proto3" json:"muted,omitempty"`
	// rid for video track
	Rid string `protobuf:"bytes,5,opt,name=rid,proto3" json:"rid,omitempty"`
	// Simulcast
	Simulcast []*Simulcast `protobuf:"bytes,6,rep,name=simulcast,proto3" json:"simulcast,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{6}
}

func (x *Track) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Track) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *Track) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Track) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

func (x *Track) GetRid() string {
	if x != nil {
		return x.Rid
	}
	return ""
}

func (x *Track) GetSimulcast() []*Simulcast {
	if x != nil {
		return x.Simulcast
	}
	return nil
}

type TrackEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State TrackEvent_State `protobuf:"varint,2,opt,name=state,proto3,enum=rtc.TrackEvent_State" json:"state,omitempty"`
	// user id
	Uid    string   `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Tracks []*Track `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *TrackEvent) Reset() {
	*x = TrackEvent{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEvent) ProtoMessage() {}

func (x *TrackEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEvent.ProtoReflect.Descriptor instead.
func (*TrackEvent) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{7}
}

func (x *TrackEvent) GetState() TrackEvent_State {
	if x != nil {
		return x.State
	}
	return TrackEvent_ADD
}

func (x *TrackEvent) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *TrackEvent) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackIds  []string `protobuf:"bytes,1,rep,name=trackIds,proto3" json:"trackIds,omitempty"`
	Subscribe bool     `protobuf:"varint,2,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{8}
}

func (x *Subscription) GetTrackIds() []string {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

func (x *Subscription) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

type MuteTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackIds []string `protobuf:"bytes,1,rep,name=trackIds,proto3" json:"trackIds,omitempty"`
	Muted    bool     `protobuf:"varint,2,opt,name=muted,proto3" json:"muted,omitempty"`
}

func (x *MuteTrack) Reset() {
	*x = MuteTrack{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MuteTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteTrack) ProtoMessage() {}

func (x *MuteTrack) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteTrack.ProtoReflect.Descriptor instead.
func (*MuteTrack) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{9}
}

func (x *MuteTrack) GetTrackIds() []string {
	if x != nil {
		return x.TrackIds
	}
	return nil
}

func (x *MuteTrack) GetMuted() bool {
	if x != nil {
		return x.Muted
	}
	return false
}

type SwitchScalabilityLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId       string `protobuf:"bytes,1,opt,name=trackId,proto3" json:"trackId,omitempty"`
	SpatialLayer  uint32 `protobuf:"varint,2,opt,name=spatialLayer,proto3" json:"spatialLayer,omitempty"`
	TemporalLayer uint32 `protobuf:"varint,3,opt,name=temporalLayer,proto3" json:"temporalLayer,omitempty"`
}

func (x *SwitchScalabilityLayer) Reset() {
	*x = SwitchScalabilityLayer{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchScalabilityLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchScalabilityLayer) ProtoMessage() {}

func (x *SwitchScalabilityLayer) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchScalabilityLayer.ProtoReflect.Descriptor instead.
func (*SwitchScalabilityLayer) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{10}
}

func (x *SwitchScalabilityLayer) GetTrackId() string {
	if x != nil {
		return x.TrackId
	}
	return ""
}

func (x *SwitchScalabilityLayer) GetSpatialLayer() uint32 {
	if x != nil {
		return x.SpatialLayer
	}
	return 0
}

func (x *SwitchScalabilityLayer) GetTemporalLayer() uint32 {
	if x != nil {
		return x.TemporalLayer
	}
	return 0
}

type UpdateSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*UpdateSettings_Subscription
	//	*UpdateSettings_SwitchLayer
	//	*UpdateSettings_MuteTrack
	Command isUpdateSettings_Command `protobuf_oneof:"command"`
}

func (x *UpdateSettings) Reset() {
	*x = UpdateSettings{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettings) ProtoMessage() {}

func (x *UpdateSettings) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettings.ProtoReflect.Descriptor instead.
func (*UpdateSettings) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{11}
}

func (m *UpdateSettings) GetCommand() isUpdateSettings_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *UpdateSettings) GetSubscription() *Subscription {
	if x, ok := x.GetCommand().(*UpdateSettings_Subscription); ok {
		return x.Subscription
	}
	return nil
}

func (x *UpdateSettings) GetSwitchLayer() *SwitchScalabilityLayer {
	if x, ok := x.GetCommand().(*UpdateSettings_SwitchLayer); ok {
		return x.SwitchLayer
	}
	return nil
}

func (x *UpdateSettings) GetMuteTrack() *MuteTrack {
	if x, ok := x.GetCommand().(*UpdateSettings_MuteTrack); ok {
		return x.MuteTrack
	}
	return nil
}

type isUpdateSettings_Command interface {
	isUpdateSettings_Command()
}

type UpdateSettings_Subscription struct {
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription,proto3,oneof"`
}

type UpdateSettings_SwitchLayer struct {
	SwitchLayer *SwitchScalabilityLayer `protobuf:"bytes,2,opt,name=switchLayer,proto3,oneof"`
}

type UpdateSettings_MuteTrack struct {
	MuteTrack *MuteTrack `protobuf:"bytes,3,opt,name=muteTrack,proto3,oneof"`
}

func (*UpdateSettings_Subscription) isUpdateSettings_Command() {}

func (*UpdateSettings_SwitchLayer) isUpdateSettings_Command() {}

func (*UpdateSettings_MuteTrack) isUpdateSettings_Command() {}

type Signalling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*Signalling_Join
	//	*Signalling_Reply
	//	*Signalling_Error
	//	*Signalling_Description
	//	*Signalling_Trickle
	//	*Signalling_UpdateSettings
	//	*Signalling_TrackEvent
	Payload isSignalling_Payload `protobuf_oneof:"payload"`
}

func (x *Signalling) Reset() {
	*x = Signalling{}
	mi := &file_rtc_v1_rtc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signalling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signalling) ProtoMessage() {}

func (x *Signalling) ProtoReflect() protoreflect.Message {
	mi := &file_rtc_v1_rtc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signalling.ProtoReflect.Descriptor instead.
func (*Signalling) Descriptor() ([]byte, []int) {
	return file_rtc_v1_rtc_proto_rawDescGZIP(), []int{12}
}

func (m *Signalling) GetPayload() isSignalling_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Signalling) GetJoin() *JoinRequest {
	if x, ok := x.GetPayload().(*Signalling_Join); ok {
		return x.Join
	}
	return nil
}

func (x *Signalling) GetReply() *JoinReply {
	if x, ok := x.GetPayload().(*Signalling_Reply); ok {
		return x.Reply
	}
	return nil
}

func (x *Signalling) GetError() *Error {
	if x, ok := x.GetPayload().(*Signalling_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Signalling) GetDescription() *SessionDescription {
	if x, ok := x.GetPayload().(*Signalling_Description); ok {
		return x.Description
	}
	return nil
}

func (x *Signalling) GetTrickle() *Trickle {
	if x, ok := x.GetPayload().(*Signalling_Trickle); ok {
		return x.Trickle
	}
	return nil
}

func (x *Signalling) GetUpdateSettings() *UpdateSettings {
	if x, ok := x.GetPayload().(*Signalling_UpdateSettings); ok {
		return x.UpdateSettings
	}
	return nil
}

func (x *Signalling) GetTrackEvent() *TrackEvent {
	if x, ok := x.GetPayload().(*Signalling_TrackEvent); ok {
		return x.TrackEvent
	}
	return nil
}

type isSignalling_Payload interface {
	isSignalling_Payload()
}

type Signalling_Join struct {
	Join *JoinRequest `protobuf:"bytes,1,opt,name=join,proto3,oneof"`
}

type Signalling_Reply struct {
	Reply *JoinReply `protobuf:"bytes,2,opt,name=reply,proto3,oneof"`
}

type Signalling_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type Signalling_Description struct {
	Description *SessionDescription `protobuf:"bytes,4,opt,name=description,proto3,oneof"`
}

type Signalling_Trickle struct {
	Trickle *Trickle `protobuf:"bytes,5,opt,name=trickle,proto3,oneof"`
}

type Signalling_UpdateSettings struct {
	UpdateSettings *UpdateSettings `protobuf:"bytes,6,opt,name=updateSettings,proto3,oneof"`
}

type Signalling_TrackEvent struct {
	TrackEvent *TrackEvent `protobuf:"bytes,7,opt,name=trackEvent,proto3,oneof"`
}

func (*Signalling_Join) isSignalling_Payload() {}

func (*Signalling_Reply) isSignalling_Payload() {}

func (*Signalling_Error) isSignalling_Payload() {}

func (*Signalling_Description) isSignalling_Payload() {}

func (*Signalling_Trickle) isSignalling_Payload() {}

func (*Signalling_UpdateSettings) isSignalling_Payload() {}

func (*Signalling_TrackEvent) isSignalling_Payload() {}

var File_rtc_v1_rtc_proto protoreflect.FileDescriptor

var file_rtc_v1_rtc_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x74, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x72, 0x74, 0x63, 0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x09,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5f, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x42, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x22, 0x33, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x5b, 0x0a, 0x09, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x63, 0x61, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9e, 0x01, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x63, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x63, 0x61, 0x73, 0x74, 0x22, 0x8d, 0x01,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22,
	0x1c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x22, 0x48, 0x0a,
	0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x4d, 0x75, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x22, 0x7c, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70,
	0x61, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xe4, 0x02, 0x0a,
	0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x74, 0x63,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x74, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x74, 0x63, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2a, 0x27, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x10, 0x01, 0x32, 0x37, 0x0a, 0x03,
	0x52, 0x54, 0x43, 0x12, 0x30, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x0f, 0x2e,
	0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x0f,
	0x2e, 0x72, 0x74, 0x63, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x68, 0x0a, 0x13, 0x68, 0x75, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x70, 0x62, 0x2e, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x74, 0x63, 0x42, 0x08, 0x52, 0x74,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x72,
	0x74, 0x63, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x52, 0x74,
	0x63, 0xca, 0x02, 0x03, 0x52, 0x74, 0x63, 0xe2, 0x02, 0x0f, 0x52, 0x74, 0x63, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x52, 0x74, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rtc_v1_rtc_proto_rawDescOnce sync.Once
	file_rtc_v1_rtc_proto_rawDescData = file_rtc_v1_rtc_proto_rawDesc
)

func file_rtc_v1_rtc_proto_rawDescGZIP() []byte {
	file_rtc_v1_rtc_proto_rawDescOnce.Do(func() {
		file_rtc_v1_rtc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rtc_v1_rtc_proto_rawDescData)
	})
	return file_rtc_v1_rtc_proto_rawDescData
}

var file_rtc_v1_rtc_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rtc_v1_rtc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_rtc_v1_rtc_proto_goTypes = []any{
	(Target)(0),                    // 0: rtc.Target
	(TrackEvent_State)(0),          // 1: rtc.TrackEvent.State
	(*JoinRequest)(nil),            // 2: rtc.JoinRequest
	(*JoinReply)(nil),              // 3: rtc.JoinReply
	(*SessionDescription)(nil),     // 4: rtc.SessionDescription
	(*Trickle)(nil),                // 5: rtc.Trickle
	(*Error)(nil),                  // 6: rtc.Error
	(*Simulcast)(nil),              // 7: rtc.Simulcast
	(*Track)(nil),                  // 8: rtc.Track
	(*TrackEvent)(nil),             // 9: rtc.TrackEvent
	(*Subscription)(nil),           // 10: rtc.Subscription
	(*MuteTrack)(nil),              // 11: rtc.MuteTrack
	(*SwitchScalabilityLayer)(nil), // 12: rtc.SwitchScalabilityLayer
	(*UpdateSettings)(nil),         // 13: rtc.UpdateSettings
	(*Signalling)(nil),             // 14: rtc.Signalling
	nil,                            // 15: rtc.JoinRequest.ParametersEntry
}
var file_rtc_v1_rtc_proto_depIdxs = []int32{
	15, // 0: rtc.JoinRequest.parameters:type_name -> rtc.JoinRequest.ParametersEntry
	6,  // 1: rtc.JoinReply.error:type_name -> rtc.Error
	0,  // 2: rtc.SessionDescription.target:type_name -> rtc.Target
	0,  // 3: rtc.Trickle.target:type_name -> rtc.Target
	7,  // 4: rtc.Track.simulcast:type_name -> rtc.Simulcast
	1,  // 5: rtc.TrackEvent.state:type_name -> rtc.TrackEvent.State
	8,  // 6: rtc.TrackEvent.tracks:type_name -> rtc.Track
	10, // 7: rtc.UpdateSettings.subscription:type_name -> rtc.Subscription
	12, // 8: rtc.UpdateSettings.switchLayer:type_name -> rtc.SwitchScalabilityLayer
	11, // 9: rtc.UpdateSettings.muteTrack:type_name -> rtc.MuteTrack
	2,  // 10: rtc.Signalling.join:type_name -> rtc.JoinRequest
	3,  // 11: rtc.Signalling.reply:type_name -> rtc.JoinReply
	6,  // 12: rtc.Signalling.error:type_name -> rtc.Error
	4,  // 13: rtc.Signalling.description:type_name -> rtc.SessionDescription
	5,  // 14: rtc.Signalling.trickle:type_name -> rtc.Trickle
	13, // 15: rtc.Signalling.updateSettings:type_name -> rtc.UpdateSettings
	9,  // 16: rtc.Signalling.trackEvent:type_name -> rtc.TrackEvent
	14, // 17: rtc.RTC.Signal:input_type -> rtc.Signalling
	14, // 18: rtc.RTC.Signal:output_type -> rtc.Signalling
	18, // [18:19] is the sub-list for method output_type
	17, // [17:18] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_rtc_v1_rtc_proto_init() }
func file_rtc_v1_rtc_proto_init() {
	if File_rtc_v1_rtc_proto != nil {
		return
	}
	file_rtc_v1_rtc_proto_msgTypes[11].OneofWrappers = []any{
		(*UpdateSettings_Subscription)(nil),
		(*UpdateSettings_SwitchLayer)(nil),
		(*UpdateSettings_MuteTrack)(nil),
	}
	file_rtc_v1_rtc_proto_msgTypes[12].OneofWrappers = []any{
		(*Signalling_Join)(nil),
		(*Signalling_Reply)(nil),
		(*Signalling_Error)(nil),
		(*Signalling_Description)(nil),
		(*Signalling_Trickle)(nil),
		(*Signalling_UpdateSettings)(nil),
		(*Signalling_TrackEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rtc_v1_rtc_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rtc_v1_rtc_proto_goTypes,
		DependencyIndexes: file_rtc_v1_rtc_proto_depIdxs,
		EnumInfos:         file_rtc_v1_rtc_proto_enumTypes,
		MessageInfos:      file_rtc_v1_rtc_proto_msgTypes,
	}.Build()
	File_rtc_v1_rtc_proto = out.File
	file_rtc_v1_rtc_proto_rawDesc = nil
	file_rtc_v1_rtc_proto_goTypes = nil
	file_rtc_v1_rtc_proto_depIdxs = nil
}
